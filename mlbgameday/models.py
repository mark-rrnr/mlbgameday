"""
This module creates sqlalchemy classes mlbgameday data,
which is subject to the license at http://gd2.mlb.com/components/copyright.txt
"""

import datetime as dt
from dateutil.relativedelta import relativedelta

from sqlalchemy import Column, Date, DateTime, Float, Integer, String, ForeignKey
from sqlalchemy.orm import backref, relationship
from sqlalchemy.schema import ForeignKeyConstraint
from sqlalchemy.ext.hybrid import hybrid_property
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

### data model from mlbam gameday ###

class Game(Base):
    __tablename__ = 'game'
    gid = Column(String(26), primary_key = True)
    game_date = Column(Date)
    year = Column(Integer)
    month = Column(Integer)
    day = Column(Integer)
    game_pk = Column(Integer)
    venue = Column(String(50))
    venue_id = Column(Integer)
    location = Column(String(20), default = '')
    datetime_local = Column(DateTime)
    datetime_et = Column(DateTime)
    first_pitch_et = Column(String(5), default = '')
    home_time = Column(String(5))
    home_time_zone = Column(String(3))
    home_ampm = Column(String(2))
    resume_home_time = Column(String(5), default = '')
    away_time = Column(String(5))
    away_time_zone = Column(String(3))
    away_ampm = Column(String(2))
    resume_away_time = Column(String(5), default = '')
    day = Column(String(3))
    game_type = Column(String(1))
    home_name_abbrev = Column(String(3))
    home_code = Column(String(3))
    home_file_code = Column(String(5))
    home_team_id = Column(Integer)
    home_team_city = Column(String(25))
    home_team_name = Column(String(30))
    home_division = Column(String(2))
    home_league_id = Column(Integer)
    home_sport_code = Column(String(3))
    home_league_id_spring = Column(String(3), default = '')
    home_split_squad = Column(String(1), default = '')
    away_name_abbrev = Column(String(3))
    away_code = Column(String(3))
    away_file_code = Column(String(5))
    away_team_id = Column(Integer)
    away_team_city = Column(String(25))
    away_team_name = Column(String(30))
    away_division = Column(String(2))
    away_league_id = Column(Integer)
    away_sport_code = Column(String(3))
    away_league_id_spring = Column(String(3), default = '')
    away_split_squad = Column(String(1), default = '')
    gameday_sw = Column(String(1))
    tiebreaker_sw = Column(String(1), default = '')
    home_games_back = Column(Float)
    away_games_back = Column(Float)
    home_games_back_wildcard = Column(Float)
    away_games_back_wildcard = Column(Float)
    home_win = Column(Integer)
    home_loss = Column(Integer)
    away_win = Column(Integer)
    away_loss = Column(Integer)
    league = Column(String(4), default = '')
    status = Column(String(15))
    ind = Column(String(2))
    home_team_runs = Column(Integer)
    away_team_runs = Column(Integer)
    home_team_hits = Column(Integer)
    away_team_hits = Column(Integer)
    home_team_errors = Column(Integer)
    away_team_errors = Column(Integer)
    reason = Column(String(17), default = '')
    description = Column(String(50), default = '')
    original_date = Column(Date)
    double_header_sw = Column(String(1), default = '')
    game_nbr = Column(Integer, default = None)
    tbd_flag = Column(String(1), default = '')
    home_team_hr = Column(Integer, default = None)
    away_team_hr = Column(Integer, default = None)
    home_team_sb = Column(Integer, default = None)
    away_team_sb = Column(Integer, default = None)
    home_team_so = Column(Integer, default = None)
    away_team_so = Column(Integer, default = None)
    resume_date = Column(Date, default = None)
    resume_time_date = Column(DateTime, default = None)
    resume_ampm = Column(String(2), default = '')
    resume_home_ampm = Column(String(2), default = '')
    series = Column(String(12), default = '')
    series_num = Column(Integer, default = None)
    ser_home_nbr = Column(Integer, default = None)
    ser_games = Column(Integer, default = None)
    scheduled_innings = Column(Integer)
    if_necessary = Column(String(1), default = '')
    tv_station = Column(String(60))
    ### weather ###
    temperature = Column(Float)
    heat_index = Column(Float)
    dew_point = Column(Float)
    humidity = Column(Float)
    pressure = Column(Float)
    visibility = Column(Float)
    wind_dir = Column(String(5))
    wind_speed = Column(Float)
    gust_speed = Column(Float)
    precipitation = Column(Float)
    ### retrosheet ###
    retro_gid = Column(String(12), ForeignKey('game_log.game_id'))

    def __repr__(self):
        return '<Game(gid = %s, game_pk = %i, home = %s, away = %s, venue = %s)>' % \
                (self.gid, self.game_pk, str(self.home_team_runs), str(self.away_team_runs), self.venue)

class Player(Base):
    __tablename__ = 'player'
    gid = Column(String(26), ForeignKey('game.gid'), primary_key = True)
    player_id = Column(Integer, ForeignKey('person.key_mlbam'), primary_key = True)
    home_flag = Column(Integer, primary_key = True)
    game_date = Column(DateTime)
    game_pk = Column(Integer)
    first = Column(String(12))
    last = Column(String(15))
    boxname = Column(String(15))
    position = Column(String(2))
    team_id = Column(Integer, default = None)
    team_abbrev = Column(String(3))
    parent_team_id = Column(Integer)
    parent_team_abbrev = Column(String(3))
    num = Column(Integer)
    bats = Column(String(1))
    rl = Column(String(1))
    game_position = Column(String(2), default = '')
    current_position = Column(String(2), default = '')
    bat_order = Column(Integer, default = None)
    status = Column(String(1))
    avg = Column(Float)
    hr = Column(Integer)
    rbi = Column(Integer)
    wins = Column(Integer, default = None)
    losses = Column(Integer, default = None)
    era = Column(Float, default = None)
    ### retrosheet ###
    retro_gid = Column(String(12), ForeignKey('game_log.game_id'))

    def __repr__(self):
        return '<Player(gid = %s, game_pk = %i, player_id = %i boxname = %s)>' % \
        (self.gid, self.game_pk, self.player_id, self.boxname)

class Coach(Base):
    __tablename__ = 'coach'
    gid = Column(String(26), ForeignKey('game.gid'), primary_key = True)
    coach_id = Column(Integer, ForeignKey('person.key_mlbam'), primary_key = True)
    home_flag = Column(Integer, primary_key = True)
    game_date = Column(DateTime)
    game_pk = Column(Integer)
    first = Column(String(10))
    last = Column(String(15))
    num = Column(Integer)
    position = Column(String(25))
    ### retrosheet ###
    retro_gid = Column(String(12), ForeignKey('game_log.game_id'))

    def __repr__(self):
        return '<Coach(gid = %s, last = %s)>' % (self.gid, self.last)

class Umpire(Base):
    __tablename__ = 'umpire'
    gid = Column(String(26), ForeignKey('game.gid'), primary_key = True)
    umpire_id = Column(Integer, ForeignKey('person.key_mlbam'), primary_key = True)
    position = Column(String(6), primary_key = True)
    game_pk = Column(Integer)
    game_date = Column(DateTime)
    last = Column(String(15), default = '')
    first = Column(String(10), default = '')
    name = Column(String(25))
    ### retrosheet ###
    retro_gid = Column(String(12), ForeignKey('game_log.game_id'))

    def __repr__(self):
        return '<Umpire(gid = %s, last = %s)>' % (self.gid, self.last)

class HIP(Base):
    __tablename__ = 'hip'
    gid = Column(String(26), ForeignKey('game.gid'), primary_key = True)
    pitcher = Column(Integer, ForeignKey('person.key_mlbam'), primary_key = True)
    batter = Column(Integer, ForeignKey('person.key_mlbam'), primary_key = True)
    inning = Column(Integer, primary_key = True)
    x = Column(Float, primary_key = True)
    year = Column(Integer)
    month = Column(Integer)
    day = Column(Integer)
    game_date = Column(Date)
    venue_id = Column(Integer)
    game_pk = Column(Integer)
    des = Column(String(20))
    y = Column(Float)
    hip_type = Column(String(1))
    team = Column(String(1))
    ### atbat ###
    game_event_number = Column(Integer, default = None)
    ### weather ###
    temperature = Column(Float)
    heat_index = Column(Float)
    dew_point = Column(Float)
    humidity = Column(Float)
    pressure = Column(Float)
    visibility = Column(Float)
    wind_dir = Column(String(5))
    wind_speed = Column(Float)
    gust_speed = Column(Float)
    precipitation = Column(Float)
    ### retrosheet ###
    retro_gid = Column(String(12), ForeignKey('game_log.game_id'))
    retro_event_id = Column(Integer, default = None)

    ### table arguements and relationships ###
    __table_args__ = (
                ForeignKeyConstraint(['retro_gid', 'retro_event_id'],
                                ['event.game_id', 'event.event_id']),
                ForeignKeyConstraint(['gid', 'game_event_number'],
                                ['atbat.gid', 'atbat.game_event_number']),
                     )

    retro_event = relationship('Event', primaryjoin = 'and_(Event.game_id == HIP.retro_gid,'\
                    'Event.event_id == HIP.retro_event_id)')

    atbat = relationship('AtBat', primaryjoin = 'and_(AtBat.gid == HIP.gid,'\
                    'AtBat.game_event_number == HIP.game_event_number)')

    def __repr__(self):
        return '<HIP(gid = %s, inning = %s, des = %s)>' \
               % (self.gid, self.inning, self.des)

class AtBat(Base):
    __tablename__ = 'atbat'
    gid = Column(String(26), ForeignKey('game.gid'), primary_key = True)
    game_event_number = Column(Integer, primary_key = True)
    game_date = Column(Date)
    year = Column(Integer)
    month = Column(Integer)
    day = Column(Integer)
    datetime = Column(DateTime)
    game_pk = Column(Integer)
    venue_id = Column(Integer)
    event_num = Column(Integer)
    inning = Column(Integer)
    inning_topbot = Column(String(3))
    play_guid = Column(String(36), default = '')
    pitcher = Column(Integer, ForeignKey('person.key_mlbam'))
    catcher = Column(Integer, ForeignKey('person.key_mlbam'))
    batter = Column(Integer, ForeignKey('person.key_mlbam'))
    umpire = Column(Integer, ForeignKey('person.key_mlbam'))
    start_outs = Column(Integer)
    start_base_state = Column(String(3))
    start_out_base_state = Column(String(4))
    start_home_team_runs = Column(Integer)
    start_away_team_runs = Column(Integer)
    start_1B = Column(Integer)
    start_2B = Column(Integer)
    start_3B = Column(Integer)
    b = Column(Integer)
    s = Column(Integer)
    o = Column(Integer)
    num = Column(Integer, default = None)
    p_throws = Column(String(1), default = '')
    stand = Column(String(1), default = '')
    b_height = Column(String(4), default = '')
    score = Column(String(1), default = '')
    start_tfs = Column(String(6), default = '')
    start_tfs_zulu = Column(DateTime)
    des = Column(String(425))
    des_es = Column(String(400))
    event = Column(String(25))
    event_es = Column(String(50), default = '')
    event2 = Column(String(25), default = '')
    event2_es = Column(String(50), default = '')
    event3 = Column(String(25), default = '')
    event3_es = Column(String(50), default = '')
    event4 = Column(String(25), default = '')
    event4_es = Column(String(50), default = '')
    end_outs = Column(Integer)
    end_base_state = Column(String(3))
    end_out_base_state = Column(String(4))
    end_home_team_runs = Column(Integer)
    end_away_team_runs = Column(Integer)
    end_1B = Column(Integer)
    end_2B = Column(Integer)
    end_3B = Column(Integer)
    ### weather ###
    temperature = Column(Float)
    heat_index = Column(Float)
    dew_point = Column(Float)
    humidity = Column(Float)
    pressure = Column(Float)
    visibility = Column(Float)
    wind_dir = Column(String(5))
    wind_speed = Column(Float)
    gust_speed = Column(Float)
    precipitation = Column(Float)
    ### retrosheet ###
    retro_gid = Column(String(12), ForeignKey('game_log.game_id'))
    retro_event_id = Column(Integer, default = None)

    def __repr__(self):
        return '<AtBat(gid = %s, game_event_number = %i, inning = %i, des = %s)>' \
               % (self.gid, self.game_event_number, self.inning, self.des)

class Action(Base):
    __tablename__ = 'action'
    gid = Column(String(26), ForeignKey('game.gid'), primary_key = True)
    game_event_number = Column(Integer, primary_key = True)
    game_date = Column(Date)
    year = Column(Integer)
    month = Column(Integer)
    day = Column(Integer)
    datetime = Column(DateTime)
    retro_gid = Column(String(12))
    game_pk = Column(Integer)
    venue_id = Column(Integer)
    event_num = Column(Integer)
    inning = Column(Integer)
    inning_topbot = Column(String(3))
    play_guid = Column(String(36), default = '')
    pitcher = Column(Integer, ForeignKey('person.key_mlbam'))
    catcher = Column(Integer, ForeignKey('person.key_mlbam'))
    batter = Column(Integer, ForeignKey('person.key_mlbam'))
    umpire = Column(Integer, ForeignKey('person.key_mlbam'))
    player = Column(Integer, default = None)
    start_outs = Column(Integer)
    start_base_state = Column(String(3))
    start_out_base_state = Column(String(4))
    start_home_team_runs = Column(Integer)
    start_away_team_runs = Column(Integer)
    start_1B = Column(Integer)
    start_2B = Column(Integer)
    start_3B = Column(Integer)
    b = Column(Integer)
    s = Column(Integer)
    o = Column(Integer)
    home_team_runs = Column(Integer, default = None)
    away_team_runs = Column(Integer, default = None)
    pitch = Column(Integer, default = None)
    score = Column(String(1), default = '')
    tfs = Column(String(6), default = '')
    tfs_zulu =  Column(DateTime)
    des = Column(String(425))
    des_es = Column(String(400))
    event = Column(String(25))
    event_es = Column(String(50), default = '')
    event2 = Column(String(25), default = '')
    event2_es = Column(String(50), default = '')
    event3 = Column(String(25), default = '')
    event3_es = Column(String(50), default = '')
    event4 = Column(String(25), default = '')
    event4_es = Column(String(50), default = '')
    end_outs = Column(Integer)
    end_base_state = Column(String(3))
    end_out_base_state = Column(String(4))
    end_home_team_runs = Column(Integer)
    end_away_team_runs = Column(Integer)
    end_1B = Column(Integer)
    end_2B = Column(Integer)
    end_3B = Column(Integer)
    ### weather ###
    temperature = Column(Float)
    heat_index = Column(Float)
    dew_point = Column(Float)
    humidity = Column(Float)
    pressure = Column(Float)
    visibility = Column(Float)
    wind_dir = Column(String(5))
    wind_speed = Column(Float)
    gust_speed = Column(Float)
    precipitation = Column(Float)
    ### retrosheet ###
    retro_gid = Column(String(12), ForeignKey('game_log.game_id'))

    def __repr__(self):
        return '<Action(gid = %s, game_event_number = %i, inning = %i, des = %s)>' \
               % (self.gid, self.game_event_number, self.inning, self.des)

class Pitch(Base):
    __tablename__ = 'pitch'
    gid = Column(String(26), ForeignKey('game.gid'), primary_key = True)
    game_pitch_count = Column(Integer, primary_key = True)
    game_date = Column(Date)
    year = Column(Integer)
    month = Column(Integer)
    day = Column(Integer)
    datetime = Column(DateTime)
    game_pk = Column(Integer)
    pitch_id = Column(Integer)
    venue_id = Column(Integer)
    inning = Column(Integer)
    inning_topbot = Column(String(3))
    game_event_number = Column(Integer)
    event_num = Column(Integer)
    event = Column(String(35))
    pitcher = Column(Integer, ForeignKey('person.key_mlbam'))
    catcher = Column(Integer, ForeignKey('person.key_mlbam'))
    batter = Column(Integer, ForeignKey('person.key_mlbam'))
    umpire = Column(Integer, ForeignKey('person.key_mlbam'))
    start_outs = Column(Integer)
    start_base_state = Column(String(3))
    start_out_base_state = Column(String(4))
    start_home_team_runs = Column(Integer)
    start_away_team_runs = Column(Integer)
    start_1B = Column(Integer)
    start_2B = Column(Integer)
    start_3B = Column(Integer)
    des = Column(String(35))
    des_es = Column(String(35))
    p_type = Column(String(1))
    tfs = Column(String(6))
    tfs_zulu =  Column(DateTime)
    x = Column(Float)
    y = Column(Float)
    sv_id = Column(DateTime)
    play_guid = Column(String(36))
    start_speed = Column(Float)
    end_speed = Column(Float)
    sz_top = Column(Float)
    sz_bot = Column(Float)
    pfx_x = Column(Float)
    pfx_z = Column(Float)
    px = Column(Float)
    pz = Column(Float)
    x0 = Column(Float)
    y0 = Column(Float)
    z0 = Column(Float)
    vx0 = Column(Float)
    vy0 = Column(Float)
    vz0 = Column(Float)
    ax = Column(Float)
    ay = Column(Float)
    az = Column(Float)
    break_y = Column(Float)
    break_angle = Column(Float)
    break_length = Column(Float)
    pitch_type = Column(String(2))
    type_confidence = Column(Float)
    zone = Column(Integer)
    nasty = Column(Integer)
    spin_dir = Column(Float)
    spin_rate = Column(Float)
    cc = Column(String(200))
    mt = Column(String(1))
    on_1b = Column(Integer, default = None)
    on_2b = Column(Integer, default = None)
    on_3b = Column(Integer, default = None)
    end_outs = Column(Integer)
    end_base_state = Column(String(3))
    end_out_base_state = Column(String(4))
    end_home_team_runs = Column(Integer)
    end_away_team_runs = Column(Integer)
    end_1B = Column(Integer)
    end_2B = Column(Integer)
    end_3B = Column(Integer)
    ### added ###
    swing = Column(Integer)
    ### weather ###
    temperature = Column(Float)
    heat_index = Column(Float)
    dew_point = Column(Float)
    humidity = Column(Float)
    pressure = Column(Float)
    visibility = Column(Float)
    wind_dir = Column(String(5))
    wind_speed = Column(Float)
    gust_speed = Column(Float)
    precipitation = Column(Float)
    ### retrosheet ###
    retro_gid = Column(String(12))
    retro_event_id = Column(Integer, default = None)

    ### table arguements and relationships ###
    __table_args__ = (
        ForeignKeyConstraint(['gid', 'game_event_number'],
                             ['atbat.gid', 'atbat.game_event_number']),
        ForeignKeyConstraint(['gid', 'game_event_number'],
                             ['action.gid', 'action.game_event_number']),
        ForeignKeyConstraint(['retro_gid', 'retro_event_id'],
                             ['event.game_id', 'event.event_id']),
                     )
    atbat = relationship('AtBat', primaryjoin = 'and_(AtBat.gid == Pitch.gid, '\
                             'AtBat.game_event_number == Pitch.game_event_number)')
    action = relationship('Action', primaryjoin = 'and_(Action.gid == Pitch.gid, '\
                             'Action.game_event_number == Pitch.game_event_number)', viewonly = True)
    retro_event = relationship('Event', primaryjoin = 'and_(Event.game_id == Pitch.retro_gid, '\
                             'Event.event_id == Pitch.retro_event_id)', viewonly = True)

    def __repr__(self):
        return '<Pitch(gid = %s, pitch_num = %i, pitch_type = %s)>' % \
               (self.gid, self.pitch_num, self.pitch_type)


class Runner(Base):
    __tablename__ = 'runner'
    gid = Column(String(26), ForeignKey('game.gid'), primary_key = True)
    game_runner_count = Column(Integer, primary_key = True)
    game_date = Column(Date)
    year = Column(Integer)
    month = Column(Integer)
    day = Column(Integer)
    game_pk = Column(Integer)
    runner_id = Column(Integer)
    game_event_number = Column(Integer)
    venue_id = Column(Integer)
    event_num = Column(Integer, default = None)
    inning = Column(Integer)
    inning_topbot = Column(String(3))
    pitcher = Column(Integer, ForeignKey('person.key_mlbam'))
    catcher = Column(Integer, ForeignKey('person.key_mlbam'))
    batter = Column(Integer, ForeignKey('person.key_mlbam'))
    umpire = Column(Integer, ForeignKey('person.key_mlbam'))
    start_outs = Column(Integer)
    start_base_state = Column(String(3))
    start_out_base_state = Column(String(4))
    start_home_team_runs = Column(Integer)
    start_away_team_runs = Column(Integer)
    start_1B = Column(Integer)
    start_2B = Column(Integer)
    start_3B = Column(Integer)
    event = Column(String(25))
    start = Column(String(2))
    end = Column(String(2))
    score = Column(String(1), default = '')
    rbi = Column(String(1), default = '')
    earned = Column(String(1), default = '')
    end_outs = Column(Integer)
    end_base_state = Column(String(3))
    end_out_base_state = Column(String(4))
    end_home_team_runs = Column(Integer)
    end_away_team_runs = Column(Integer)
    end_1B = Column(Integer)
    end_2B = Column(Integer)
    end_3B = Column(Integer)
    ### weather ###
    temperature = Column(Float)
    heat_index = Column(Float)
    dew_point = Column(Float)
    humidity = Column(Float)
    pressure = Column(Float)
    visibility = Column(Float)
    wind_dir = Column(String(5))
    wind_speed = Column(Float)
    gust_speed = Column(Float)
    precipitation = Column(Float)
    ### retrosheet ###
    retro_gid = Column(String(12), ForeignKey('game_log.game_id'))

    ### table arguements and relationships ###
    __table_args__ = (
        ForeignKeyConstraint(['gid', 'game_event_number'],
                             ['atbat.gid', 'atbat.game_event_number']),
        ForeignKeyConstraint(['gid', 'game_event_number'],
                             ['action.gid', 'action.game_event_number']),
                     )
    atbat = relationship('AtBat', primaryjoin = 'and_(AtBat.gid == Runner.gid, '\
                             'AtBat.game_event_number == Runner.game_event_number)')
    action = relationship('Action', primaryjoin = 'and_(Action.gid == Runner.gid, '\
                             'Action.game_event_number == Runner.game_event_number)', viewonly = True)

    def __repr__(self):
        return '<Runner(game_pk = %s, gid = %s, des = %s)>' % \
               (str(self.game_pk), str(self.event_num), str(self.des))

class Pickoff(Base):
    __tablename__ = 'pickoff'
    gid = Column(String(26), ForeignKey('game.gid'), primary_key = True)
    game_pickofff_count = Column(Integer, primary_key = True)
    game_date = Column(Date)
    year = Column(Integer)
    month = Column(Integer)
    day = Column(Integer)
    game_pk = Column(Integer)
    game_event_number = Column(Integer)
    venue_id = Column(Integer)
    event_num = Column(Integer, default = None)
    inning = Column(Integer)
    inning_topbot = Column(String(3))
    pitcher = Column(Integer, ForeignKey('person.key_mlbam'))
    catcher = Column(Integer, ForeignKey('person.key_mlbam'))
    batter = Column(Integer, ForeignKey('person.key_mlbam'))
    umpire = Column(Integer, ForeignKey('person.key_mlbam'))
    start_outs = Column(Integer)
    start_base_state = Column(String(3))
    start_out_base_state = Column(String(4))
    start_home_team_runs = Column(Integer)
    start_away_team_runs = Column(Integer)
    start_1B = Column(Integer)
    start_2B = Column(Integer)
    start_3B = Column(Integer)
    des = Column(String(20))
    des_es = Column(String(20), default = '')
    play_guid = Column(String(36), default = '')
    end_outs = Column(Integer)
    end_base_state = Column(String(3))
    end_out_base_state = Column(String(4))
    end_home_team_runs = Column(Integer)
    end_away_team_runs = Column(Integer)
    end_1B = Column(Integer)
    end_2B = Column(Integer)
    end_3B = Column(Integer)
    ### weather ###
    temperature = Column(Float)
    heat_index = Column(Float)
    dew_point = Column(Float)
    humidity = Column(Float)
    pressure = Column(Float)
    visibility = Column(Float)
    wind_dir = Column(String(5))
    wind_speed = Column(Float)
    gust_speed = Column(Float)
    precipitation = Column(Float)
    ### retrosheet ###
    retro_gid = Column(String(12), ForeignKey('game_log.game_id'))

    ### table arguements and relationships ###
    __table_args__ = (
        ForeignKeyConstraint(['gid', 'game_event_number'],
                             ['atbat.gid', 'atbat.game_event_number']),
        ForeignKeyConstraint(['gid', 'game_event_number'],
                             ['action.gid', 'action.game_event_number']),
                     )
    atbat = relationship('AtBat', primaryjoin = 'and_(AtBat.gid == Pickoff.gid,'\
                             'AtBat.game_event_number == Pickoff.game_event_number)')
    action = relationship('Action', primaryjoin = 'and_(Action.gid == Pickoff.gid,'\
                             'Action.game_event_number == Pickoff.game_event_number)', viewonly = True)

    def __repr__(self):
        return '<Pickoff(gid = %s, game_event_number = %i, atbat_pickoff_number = %s)>' \
               % (self.gid, self.game_event_number, self.atbat_pickoff_numbers)


### data model from baseball savant trajectory csv downloads ###

class Trajectory(Base):
    __tablename__ = 'trajectory'
    game_pk = Column(Integer, ForeignKey('game.game_pk'), primary_key = True)
    pitch_id = Column(Integer, primary_key = True)
    game_date = Column(DateTime, primary_key = True)
    year = Column(Integer)
    month = Column(Integer)
    day = Column(Integer)
    pitch_type = Column(String(2))
    start_speed = Column(Float)
    x0 = Column(Float)
    z0 = Column(Float)
    player_name = Column(String(30))
    batter = Column(Integer, ForeignKey('person.key_mlbam'))
    pitcher = Column(Integer, ForeignKey('person.key_mlbam'))
    events = Column(String(10))
    description = Column(String(20))
    spin_dir = Column(Float)
    spin_rate = Column(Float)
    break_angle = Column(Float)
    break_length = Column(Float)
    zone = Column(Integer)
    des = Column(String(100))
    game_type = Column(String(1))
    stand = Column(String(1))
    p_throws = Column(String(1))
    home_team = Column(String(3))
    away_team = Column(String(3))
    event_type = Column(String(1))
    hit_location = Column(Integer)
    bb_type = Column(Integer)
    balls = Column(Integer)
    strikes = Column(Integer)
    game_year = Column(Integer)
    pfx_x = Column(Float)
    pfx_z = Column(Float)
    px = Column(Float)
    pz = Column(Float)
    on_3b = Column(Integer)
    on_2b = Column(Integer)
    on_1b = Column(Integer)
    outs_when_up = Column(Integer)
    inning = Column(Integer)
    inning_topbot = Column(String(3))
    hc_x = Column(Float)
    hc_y = Column(Float)
    tfs = Column(Integer)
    tfs_zulu = Column(DateTime)
    catcher = Column(Integer, ForeignKey('person.key_mlbam'))
    umpire = Column(Integer, ForeignKey('person.key_mlbam'))
    sv_id = Column(String(13))
    vx0 = Column(Float)
    vy0 = Column(Float)
    vz0 = Column(Float)
    ax = Column(Float)
    ay = Column(Float)
    az = Column(Float)
    sz_top = Column(Float)
    sz_bot = Column(Float)
    hit_distance_sc = Column(Float)
    hit_speed = Column(Float)
    hit_angle = Column(Float)
    effective_speed = Column(Float)
    release_spin_rate = Column(Float)
    release_extension = Column(Float)
    ### weather ###
    temperature = Column(Float)
    heat_index = Column(Float)
    dew_point = Column(Float)
    humidity = Column(Float)
    pressure = Column(Float)
    visibility = Column(Float)
    wind_dir = Column(String(5))
    wind_speed = Column(Float)
    gust_speed = Column(Float)
    precipitation = Column(Float)
    ### retrosheet ###
    retro_gid = Column(String(12))
    retro_event_id = Column(Integer, default = None)

    ### table arguements and relationships ###
    __table_args__ = (
        ForeignKeyConstraint(['retro_gid', 'retro_event_id'],
                             ['event.game_id', 'event.event_id']),
                     )

    retro_event = relationship('Event', primaryjoin = 'and_(Event.game_id == Trajectory.retro_gid,'\
         'Event.event_id == Trajectory.retro_event_id)')

    def __repr__(self):
        return '<Trajectory(game_pk = %i, pitcher = %s, game_date = %s)>' % \
               (self.game_pk, self.player_name, self.game_date.strftime('%Y-%m-%d'))


### data model from retrosheet ###

class GameLog(Base):
    __tablename__ = 'game_log'
    game_id = Column(String(12),  primary_key = True)
    game_date = Column(Date)
    year = Column(Integer)
    month = Column(Integer)
    day = Column(Integer)
    game_number = Column(String(1))
    day = Column(String(3))
    away_team_id = Column(String(3), ForeignKey('team.cur_fran_id'))
    away_lg = Column(String(2))
    away_game_number = Column(Integer)
    home_team_id = Column(String(3), ForeignKey('team.cur_fran_id'))
    home_lg = Column(String(2))
    home_game_number = Column(Integer)
    away_score_ct = Column(Integer)
    home_score_ct = Column(Integer)
    outs = Column(Integer)
    daynight = Column(String(1))
    completion = Column(String(255))
    forfeit = Column(String(1))
    protest = Column(String(2))
    park = Column(String(5))
    attendance = Column(Integer)
    game_minutes = Column(Integer)
    away_linescore = Column(String(20))
    home_linescore = Column(String(30))
    away_ab = Column(Integer)
    away_h = Column(Integer)
    away_2b = Column(Integer)
    away_3b = Column(Integer)
    away_hr = Column(Integer)
    away_rbi = Column(Integer)
    away_sh = Column(Integer)
    away_sf = Column(Integer)
    away_hbp = Column(Integer)
    away_bb = Column(Integer)
    away_ibb = Column(Integer)
    away_so = Column(Integer)
    away_sb = Column(Integer)
    away_cs = Column(Integer)
    away_gidp = Column(Integer)
    away_ci = Column(Integer)
    away_lob = Column(Integer)
    away_pitchers_used = Column(Integer)
    away_individual_er = Column(Integer)
    away_team_er = Column(Integer)
    away_wp = Column(Integer)
    away_balks = Column(Integer)
    away_putouts = Column(Integer)
    away_assists = Column(Integer)
    away_errors = Column(Integer)
    away_passed_balls = Column(Integer)
    away_double_plays = Column(Integer)
    away_triple_plays = Column(Integer)
    home_ab = Column(Integer)
    home_h = Column(Integer)
    home_2b = Column(Integer)
    home_3b = Column(Integer)
    home_hr = Column(Integer)
    home_rbi = Column(Integer)
    home_sh = Column(Integer)
    home_sf = Column(Integer)
    home_hbp = Column(Integer)
    home_bb = Column(Integer)
    home_ibb = Column(Integer)
    home_so = Column(Integer)
    home_sb = Column(Integer)
    home_cs = Column(Integer)
    home_gidp = Column(Integer)
    home_ci = Column(Integer)
    home_lob = Column(Integer)
    home_pitchers_used = Column(Integer)
    home_individual_er = Column(Integer)
    home_team_er = Column(Integer)
    home_wp = Column(Integer)
    home_balks = Column(Integer)
    home_putouts = Column(Integer)
    home_assists = Column(Integer)
    home_errors = Column(Integer)
    home_passed_balls = Column(Integer)
    home_double_plays = Column(Integer)
    home_triple_plays = Column(Integer)
    hp_ump_id = Column(String(8), ForeignKey('person.key_retro'))
    hp_ump_name = Column(String(255))
    b1_ump_id = Column(String(8), ForeignKey('person.key_retro'))
    b1_ump_name = Column(String(255))
    b2_ump_id = Column(String(8), ForeignKey('person.key_retro'))
    b2_ump_name = Column(String(255))
    b3_ump_id = Column(String(8), ForeignKey('person.key_retro'))
    b3_ump_name = Column(String(255))
    lf_ump_id = Column(String(8), ForeignKey('person.key_retro'))
    lf_ump_name = Column(String(255))
    rf_ump_id = Column(String(8), ForeignKey('person.key_retro'))
    rf_ump_name = Column(String(255))
    away_manager_id = Column(String(8), ForeignKey('person.key_retro'))
    away_manager_name = Column(String(255))
    home_manager_id = Column(String(8), ForeignKey('person.key_retro'))
    home_manager_name = Column(String(255))
    winning_pitcher_id = Column(String(8), ForeignKey('person.key_retro'))
    winning_pitcher_name = Column(String(255))
    losing_pitcher_id = Column(String(8), ForeignKey('person.key_retro'))
    losing_pitcher_name = Column(String(255))
    saving_pitcher_id = Column(String(8), ForeignKey('person.key_retro'))
    saving_pitcher_name = Column(String(255))
    gwrbi_batter_id = Column(String(8), ForeignKey('person.key_retro'))
    gwrbi_batter_name = Column(String(255))
    away_starting_pitcher_id = Column(String(8), ForeignKey('person.key_retro'))
    away_starting_pitcher_name = Column(String(255))
    home_starting_pitcher_id = Column(String(8), ForeignKey('person.key_retro'))
    home_starting_pitcher_name = Column(String(255))
    away_batter_1_id = Column(String(8), ForeignKey('person.key_retro'))
    away_batter_1_name = Column(String(255))
    away_batter_1_pos = Column(Integer)
    away_batter_2_id = Column(String(8), ForeignKey('person.key_retro'))
    away_batter_2_name = Column(String(255))
    away_batter_2_pos = Column(Integer)
    away_batter_3_id = Column(String(8), ForeignKey('person.key_retro'))
    away_batter_3_name = Column(String(255))
    away_batter_3_pos = Column(Integer)
    away_batter_4_id = Column(String(8), ForeignKey('person.key_retro'))
    away_batter_4_name = Column(String(255))
    away_batter_4_pos = Column(Integer)
    away_batter_5_id = Column(String(8), ForeignKey('person.key_retro'))
    away_batter_5_name = Column(String(255))
    away_batter_5_pos = Column(Integer)
    away_batter_6_id = Column(String(8), ForeignKey('person.key_retro'))
    away_batter_6_name = Column(String(255))
    away_batter_6_pos = Column(Integer)
    away_batter_7_id = Column(String(8), ForeignKey('person.key_retro'))
    away_batter_7_name = Column(String(255))
    away_batter_7_pos = Column(Integer)
    away_batter_8_id = Column(String(8), ForeignKey('person.key_retro'))
    away_batter_8_name = Column(String(255))
    away_batter_8_pos = Column(Integer)
    away_batter_9_id = Column(String(8), ForeignKey('person.key_retro'))
    away_batter_9_name = Column(String(255))
    away_batter_9_pos = Column(Integer)
    home_batter_1_id = Column(String(8), ForeignKey('person.key_retro'))
    home_batter_1_name = Column(String(255))
    home_batter_1_pos = Column(Integer)
    home_batter_2_id = Column(String(8), ForeignKey('person.key_retro'))
    home_batter_2_name = Column(String(255))
    home_batter_2_pos = Column(Integer)
    home_batter_3_id = Column(String(8), ForeignKey('person.key_retro'))
    home_batter_3_name = Column(String(255))
    home_batter_3_pos = Column(Integer)
    home_batter_4_id = Column(String(8), ForeignKey('person.key_retro'))
    home_batter_4_name = Column(String(255))
    home_batter_4_pos = Column(Integer)
    home_batter_5_id = Column(String(8), ForeignKey('person.key_retro'))
    home_batter_5_name = Column(String(255))
    home_batter_5_pos = Column(Integer)
    home_batter_6_id = Column(String(8), ForeignKey('person.key_retro'))
    home_batter_6_name = Column(String(255))
    home_batter_6_pos = Column(Integer)
    home_batter_7_id = Column(String(8), ForeignKey('person.key_retro'))
    home_batter_7_name = Column(String(255))
    home_batter_7_pos = Column(Integer)
    home_batter_8_id = Column(String(8), ForeignKey('person.key_retro'))
    home_batter_8_name = Column(String(255))
    home_batter_8_pos = Column(Integer)
    home_batter_9_id = Column(String(8), ForeignKey('person.key_retro'))
    home_batter_9_name = Column(String(255))
    home_batter_9_pos = Column(Integer)
    additional_info = Column(String(255))
    acquisition = Column(String(1))

    def __repr__(self):
        return '<GameLog(game_id = %s, away_score_ct = %i, home_score_ct = %i)>' % \
        (self.game_id, self.away_score_ct, self.home_score_ct)



class Event(Base):
    __tablename__ = 'event'
    game_id = Column(String(12), ForeignKey('game_log.game_id'), primary_key = True)
    event_id = Column(Integer, primary_key = True)
    game_date = Column(Date)
    year = Column(Integer)
    month = Column(Integer)
    day = Column(Integer)
    away_team_id = Column(String(3), ForeignKey('team.cur_fran_id'))
    home_team_id = Column(String(3), ForeignKey('team.cur_fran_id'))
    inn_ct = Column(Integer)
    bat_home_id = Column(Integer)
    outs_ct = Column(Integer)
    balls_ct = Column(Integer)
    strikes_ct = Column(Integer)
    pitch_seq_tx = Column(String(40))
    away_score_ct = Column(Integer)
    home_score_ct = Column(Integer)
    bat_id = Column(String(8), ForeignKey('person.key_retro'))
    bat_hand_cd = Column(String(1))
    resp_bat_id = Column(String(8), ForeignKey('person.key_retro'))
    bat_on_deck_id = Column(String(8), ForeignKey('person.key_retro'))
    bat_in_hold_id = Column(String(8), ForeignKey('person.key_retro'))
    resp_bat_hand_cd = Column(String(1))
    pit_id = Column(String(8), ForeignKey('person.key_retro'))
    pit_hand_cd = Column(String(1))
    resp_pit_id = Column(String(8), ForeignKey('person.key_retro'))
    resp_pit_hand_cd = Column(String(1))
    pos2_fld_id = Column(String(8), ForeignKey('person.key_retro'))
    pos3_fld_id = Column(String(8), ForeignKey('person.key_retro'))
    pos4_fld_id = Column(String(8), ForeignKey('person.key_retro'))
    pos5_fld_id = Column(String(8), ForeignKey('person.key_retro'))
    pos6_fld_id = Column(String(8), ForeignKey('person.key_retro'))
    pos7_fld_id = Column(String(8), ForeignKey('person.key_retro'))
    pos8_fld_id = Column(String(8), ForeignKey('person.key_retro'))
    pos9_fld_id = Column(String(8), ForeignKey('person.key_retro'))
    base1_run_id = Column(String(8), ForeignKey('person.key_retro'))
    base2_run_id = Column(String(8), ForeignKey('person.key_retro'))
    base3_run_id = Column(String(8), ForeignKey('person.key_retro'))
    event_tx = Column(String(100))
    leadoff_fl = Column(String(1))
    ph_fl = Column(String(1))
    bat_fld_cd = Column(Integer)
    bat_lineup_id = Column(Integer)
    event_cd = Column(Integer)
    bat_event_fl = Column(String(1))
    ab_fl = Column(String(1))
    h_cd = Column(Integer)
    sh_fl = Column(String(1))
    sf_fl = Column(String(1))
    event_outs_ct = Column(Integer)
    dp_fl = Column(String(1))
    tp_fl = Column(String(1))
    rbi_ct = Column(Integer)
    wp_fl = Column(String(1))
    pb_fl = Column(String(1))
    fld_cd = Column(Integer)
    battedball_cd = Column(String(1))
    bunt_fl = Column(String(1))
    foul_fl = Column(String(1))
    battedball_loc_tx = Column(String(5))
    err_ct = Column(Integer)
    err1_fld_cd = Column(Integer)
    err1_cd = Column(String(1))
    err2_fld_cd = Column(Integer)
    err2_cd = Column(String(1))
    err3_fld_cd = Column(Integer)
    err3_cd = Column(String(1))
    bat_dest_id = Column(Integer)
    run1_dest_id = Column(Integer)
    run2_dest_id = Column(Integer)
    run3_dest_id = Column(Integer)
    bat_play_tx = Column(String(8))
    run1_play_tx = Column(String(15))
    run2_play_tx = Column(String(15))
    run3_play_tx = Column(String(15))
    run1_sb_fl = Column(String(1))
    run2_sb_fl = Column(String(1))
    run3_sb_fl = Column(String(1))
    run1_cs_fl = Column(String(1))
    run2_cs_fl = Column(String(1))
    run3_cs_fl = Column(String(1))
    run1_pk_fl = Column(String(1))
    run2_pk_fl = Column(String(1))
    run3_pk_fl = Column(String(1))
    run1_resp_pit_id = Column(String(8), ForeignKey('person.key_retro'))
    run2_resp_pit_id = Column(String(8), ForeignKey('person.key_retro'))
    run3_resp_pit_id = Column(String(8), ForeignKey('person.key_retro'))
    game_new_fl = Column(String(1))
    game_end_fl = Column(String(1))
    pr_run1_fl = Column(String(1))
    pr_run2_fl = Column(String(1))
    pr_run3_fl = Column(String(1))
    removed_for_pr_run1_id = Column(String(8), ForeignKey('person.key_retro'))
    removed_for_pr_run2_id = Column(String(8), ForeignKey('person.key_retro'))
    removed_for_pr_run3_id = Column(String(8), ForeignKey('person.key_retro'))
    removed_for_ph_bat_id = Column(String(8), ForeignKey('person.key_retro'))
    removed_for_ph_bat_fld_cd = Column(Integer)
    po1_fld_cd = Column(Integer)
    po2_fld_cd = Column(Integer)
    po3_fld_cd = Column(Integer)
    ass1_fld_cd = Column(Integer)
    ass2_fld_cd = Column(Integer)
    ass3_fld_cd = Column(Integer)
    ass4_fld_cd = Column(Integer)
    ass5_fld_cd = Column(Integer)
    ### extended fields ###
    home_team_id = Column(String(3))
    bat_team_id = Column(String(3))
    fld_team_id = Column(String(3))
    bat_last_id = Column(Integer)
    inn_new_fl = Column(String(1))
    inn_end_fl = Column(String(1))
    start_bat_score_ct = Column(Integer)
    start_fld_score_ct = Column(Integer)
    inn_runs_ct = Column(Integer)
    game_pa_ct = Column(Integer)
    inn_pa_ct = Column(Integer)
    pa_new_fl = Column(String(1))
    pa_trunc_fl = Column(String(1))
    start_bases_cd = Column(Integer)
    end_bases_cd = Column(Integer)
    bat_start_fl = Column(String(1))
    resp_bat_start_fl = Column(String(1))
    pit_start_fl = Column(String(1))
    resp_pit_start_fl = Column(String(1))
    run1_fld_cd = Column(Integer)
    run1_lineup_cd = Column(Integer)
    run1_origin_event_id = Column(Integer)
    run2_fld_cd = Column(Integer)
    run2_lineup_cd = Column(Integer)
    run2_origin_event_id = Column(Integer)
    run3_fld_cd = Column(Integer)
    run3_lineup_cd = Column(Integer)
    run3_origin_event_id = Column(Integer)
    run1_resp_cat_id = Column(String(8))
    run2_resp_cat_id = Column(String(8))
    run3_resp_cat_id = Column(String(8))
    pa_ball_ct = Column(Integer)
    pa_called_ball_ct = Column(Integer, default = 0)
    pa_intent_ball_ct = Column(Integer)
    pa_pitchout_ball_ct = Column(Integer)
    pa_hitbatter_ball_ct = Column(Integer)
    pa_other_ball_ct = Column(Integer)
    pa_strike_ct = Column(Integer)
    pa_called_strike_ct = Column(Integer)
    pa_swingmiss_strike_ct = Column(Integer)
    pa_foul_strike_ct = Column(Integer)
    pa_inplay_strike_ct = Column(Integer)
    pa_other_strike_ct = Column(Integer)
    event_runs_ct = Column(Integer)
    fld_id = Column(String(8), ForeignKey('person.key_retro'))
    base2_force_fl = Column(String(1))
    base3_force_fl = Column(String(1))
    base4_force_fl = Column(String(1))
    bat_safe_err_fl = Column(String(1))
    bat_fate_id = Column(Integer)
    run1_fate_id = Column(Integer)
    run2_fate_id = Column(Integer)
    run3_fate_id = Column(Integer)
    fate_runs_ct = Column(Integer)
    ass6_fld_cd = Column(Integer)
    ass7_fld_cd = Column(Integer)
    ass8_fld_cd = Column(Integer)
    ass9_fld_cd = Column(Integer)
    ass10_fld_cd = Column(Integer)
    unknown_out_exc_fl = Column(String(1))
    uncertain_play_exc_fl = Column(String(1))
    ### event descriptions ###
    event_cd_tx = Column(String(4))
    event_cd_des = Column(String(30))
    ### weather ###
    temperature = Column(Float)
    heat_index = Column(Float)
    dew_point = Column(Float)
    humidity = Column(Float)
    pressure = Column(Float)
    visibility = Column(Float)
    wind_dir = Column(String(5))
    wind_speed = Column(Float)
    gust_speed = Column(Float)
    precipitation = Column(Float)

    def __repr__(self):
        return '<Event(game_id = %s, event_id = %i, inning = %i)>' % \
                (self.game_id, self.event_id, self.inn_ct)

class Sub(Base):
    __tablename__ = 'sub'
    game_id = Column(String(12), ForeignKey('game_log.game_id'), primary_key = True)
    sub_id = Column(String(8), primary_key = True)
    sub_fld_cd = Column(Integer, primary_key = True)
    event_id = Column(Integer, primary_key = True)
    inn_ct = Column(Integer)
    bat_home_id = Column(Integer)
    sub_home_id = Column(Integer)
    sub_lineup_id = Column(Integer)
    removed_id = Column(String(8), primary_key = True)
    removed_fld_cd = Column(Integer)

    def __repr__(self):
        return '<Sub(game_id = %s, event_id = %i, inning = %i, remove = %s)>' % \
        (self.game_id, self.event_id, self.inn_ct, self.removed_id)

class Team(Base):
    __tablename__ = 'team'
    cur_fran_id = Column(String(3), primary_key = True)
    start_date = Column(Date, primary_key = True)
    fran_id = Column(String(3))
    lg = Column(String(3))
    div = Column(String(3))
    location = Column(String(15))
    name = Column(String(15))
    alt_name = Column(String(30))
    end_date = Column(Date)
    city = Column(String(15))
    state = Column(String(2))

    def __repr__(self):
        return '<Team(team_id = %s, city = %s, start = %i, end = %s)>' % \
        (self.fran_id, self.city, str(self.start_date), str(self.end_date))

class Person(Base):
    __tablename__ = 'person'
    key_person = Column(String(8), primary_key = True)
    key_uuid = Column(String(36))
    key_retro = Column(String(8))
    key_mlbam = Column(Integer)
    key_bbref = Column(String(9))
    key_bbref_minors = Column(String(12))
    key_fangraphs = Column(Integer)
    key_npb = Column(Integer)
    key_sr_nfl = Column(String(8))
    key_sr_nba = Column(String(10))
    key_sr_nhl = Column(String(9))
    key_findagrave = Column(Integer)
    name_last = Column(String(20))
    name_first = Column(String(20))
    name_given = Column(String(20))
    name_suffix = Column(String(20))
    name_matrilineal = Column(String(20))
    name_nick = Column(String(50))
    birth_year = Column(Integer)
    birth_month = Column(Integer)
    birth_day = Column(Integer)
    death_year = Column(Integer)
    death_month = Column(Integer)
    death_day = Column(Integer)
    pro_played_first = Column(Integer)
    pro_played_last = Column(Integer)
    mlb_played_first = Column(Integer)
    mlb_played_last = Column(Integer)
    col_played_first = Column(Integer)
    col_played_last = Column(Integer)
    pro_managed_first = Column(Integer)
    pro_managed_last = Column(Integer)
    mlb_managed_first = Column(Integer)
    mlb_managed_last = Column(Integer)
    col_managed_first = Column(Integer)
    col_managed_last = Column(Integer)
    pro_umpired_first = Column(Integer)
    pro_umpired_last = Column(Integer)
    mlb_umpired_first = Column(Integer)
    mlb_umpired_last = Column(Integer)

    @hybrid_property
    def birth_date(self):
        if self.birth_year is not None and self.birth_month is not None and self.birth_date is not None:
            return dt.date(self.birth_year, self.birth_month, self.birth_day)
        else:
            return None

    @hybrid_property
    def age(self):
        if self.birth_year is not None and self.birth_month is not None and self.birth_date is not None:
            today = dt.date.today()
            birthday = dt.date(self.birth_year, self.birth_month, self.birth_day)
            return relativedelta(today, birthday).years
        else:
            return None

    def __repr__(self):
        return '<Person(key_person = %s, first = %s, last = %s)>' % \
        (self.key_person, self.name_first, self.name_last)

class Park(Base):
    __tablename__ = 'park'
    park_id = Column(String(5), primary_key = True)
    name = Column(String(40))
    alias = Column(String(100))
    city = Column(String(20))
    state = Column(String(15))
    country = Column(String(2))
    venue_id = Column(Integer)

    def __repr__(self):
        return '<Park(park_id = %s, name = %s, city = %s)>' % \
        (self.park_id, self.name, self.city)

class Weather(Base):
    __tablename__ = 'weather'
    gid = Column(String(26), primary_key = True)
    datetime = Column(DateTime, primary_key = True)
    venue_id = Column(Integer)
    park_id = Column(String(5), ForeignKey('park.park_id'))
    temperature = Column(Float)
    heat_index = Column(Float)
    dew_point = Column(Float)
    humidity = Column(Float)
    pressure = Column(Float)
    visibility = Column(Float)
    wind_dir = Column(String(5))
    wind_speed = Column(Float)
    gust_speed = Column(Float)
    precipitation = Column(Float)

    def __repr__(self):
        return '<Weather(gid = %s, time = %s, temperature = %.1f)>' % \
        (self.gid, self.datetime.strftime('%H:%M'), self.temperature)

def create_db(engine):
    Base.metadata.create_all(engine)
